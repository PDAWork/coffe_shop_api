// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApplication1.Data;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-rc.1.24451.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApplication1.features.auth.model.AccessTokenModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccessTokens");
                });

            modelBuilder.Entity("WebApplication1.features.auth.model.RoleModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9a763126-6fd0-4bda-aa78-a7aa3359dfaa",
                            CreateAt = new DateTime(2024, 10, 17, 11, 14, 55, 549, DateTimeKind.Utc).AddTicks(7150),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            UpdateAt = new DateTime(2024, 10, 17, 11, 14, 55, 562, DateTimeKind.Utc).AddTicks(6530)
                        },
                        new
                        {
                            Id = "b1a70fc1-8865-4c42-a1f0-dd08d382b8b6",
                            CreateAt = new DateTime(2024, 10, 17, 11, 14, 55, 562, DateTimeKind.Utc).AddTicks(9560),
                            Name = "User",
                            NormalizedName = "USER",
                            UpdateAt = new DateTime(2024, 10, 17, 11, 14, 55, 562, DateTimeKind.Utc).AddTicks(9560)
                        });
                });

            modelBuilder.Entity("WebApplication1.features.auth.model.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebApplication1.features.basket.model.BasketModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<long>("CoffeeId")
                        .HasColumnType("bigint");

                    b.Property<int>("CoffeeSizeId")
                        .HasColumnType("integer");

                    b.Property<short>("CountSugar")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Quantity")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeId");

                    b.HasIndex("CoffeeSizeId");

                    b.HasIndex("OrderId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("WebApplication1.features.basket.model.OrderModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("StatusOrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("StatusOrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebApplication1.features.basket.model.StatusOrderModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("StatusOrders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2680),
                            Name = "Pending",
                            UpdatedAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2680)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(3050),
                            Name = "Confirmed",
                            UpdatedAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(3050)
                        });
                });

            modelBuilder.Entity("WebApplication1.model.CoffeeModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Coffes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(1630),
                            Name = "Американо",
                            Path = "85539d89-23ab-41bc-9267-0f86e35957f4.svg",
                            Price = 275f,
                            UpdateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(1630)
                        },
                        new
                        {
                            Id = 2L,
                            CreateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2160),
                            Name = "Латте",
                            Path = "5d5dc247-eba6-44d4-a87d-24475f7f40bf.svg",
                            Price = 330f,
                            UpdateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2160)
                        },
                        new
                        {
                            Id = 3L,
                            CreateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2160),
                            Name = "Эспрессо",
                            Path = "635a7237-552b-459c-a304-6c32e6ba29fa.svg",
                            Price = 150f,
                            UpdateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2170)
                        },
                        new
                        {
                            Id = 4L,
                            CreateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2170),
                            Name = "Макиато",
                            Path = "5779c99f-1228-42e7-ad32-b447d3f750a2.svg",
                            Price = 365f,
                            UpdateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2170)
                        },
                        new
                        {
                            Id = 5L,
                            CreateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2170),
                            Name = "Лунго",
                            Path = "e80b89f0-09c2-4f31-85e7-c1ab61cb4cab.svg",
                            Price = 350f,
                            UpdateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2170)
                        },
                        new
                        {
                            Id = 6L,
                            CreateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2180),
                            Name = "Корретто",
                            Path = "9760acfa-75a3-4b2a-b599-c6dc811c939c.svg",
                            Price = 365f,
                            UpdateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2180)
                        },
                        new
                        {
                            Id = 7L,
                            CreateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2180),
                            Name = "Эспрессо Романо",
                            Path = "e0f2d3d9-17fc-4c90-bf76-49fa22d059e2.svg",
                            Price = 200f,
                            UpdateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2180)
                        },
                        new
                        {
                            Id = 8L,
                            CreateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2180),
                            Name = "Галан",
                            Path = "b3355c87-de26-4c93-9673-dd725ea7757c.svg",
                            Price = 330f,
                            UpdateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(2180)
                        });
                });

            modelBuilder.Entity("WebApplication1.model.CoffeeSizeModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<short>("Percent")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("CoffeSizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(590),
                            Name = "S",
                            Percent = (short)0,
                            UpdateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(590)
                        },
                        new
                        {
                            Id = 2,
                            CreateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(1130),
                            Name = "M",
                            Percent = (short)20,
                            UpdateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(1130)
                        },
                        new
                        {
                            Id = 3,
                            CreateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(1140),
                            Name = "L",
                            Percent = (short)30,
                            UpdateAt = new DateTime(2024, 10, 17, 11, 14, 55, 563, DateTimeKind.Utc).AddTicks(1140)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("WebApplication1.features.auth.model.RoleModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebApplication1.features.auth.model.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebApplication1.features.auth.model.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("WebApplication1.features.auth.model.RoleModel", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.features.auth.model.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebApplication1.features.auth.model.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApplication1.features.auth.model.AccessTokenModel", b =>
                {
                    b.HasOne("WebApplication1.features.auth.model.UserModel", "User")
                        .WithMany("AccessTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.features.basket.model.BasketModel", b =>
                {
                    b.HasOne("WebApplication1.model.CoffeeModel", "Coffee")
                        .WithMany("Baskets")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.model.CoffeeSizeModel", "CoffeeSize")
                        .WithMany("Baskets")
                        .HasForeignKey("CoffeeSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.features.basket.model.OrderModel", "Order")
                        .WithMany("Baskets")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");

                    b.Navigation("CoffeeSize");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebApplication1.features.basket.model.OrderModel", b =>
                {
                    b.HasOne("WebApplication1.features.basket.model.StatusOrderModel", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApplication1.features.auth.model.UserModel", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication1.features.auth.model.UserModel", b =>
                {
                    b.Navigation("AccessTokens");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebApplication1.features.basket.model.OrderModel", b =>
                {
                    b.Navigation("Baskets");
                });

            modelBuilder.Entity("WebApplication1.features.basket.model.StatusOrderModel", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebApplication1.model.CoffeeModel", b =>
                {
                    b.Navigation("Baskets");
                });

            modelBuilder.Entity("WebApplication1.model.CoffeeSizeModel", b =>
                {
                    b.Navigation("Baskets");
                });
#pragma warning restore 612, 618
        }
    }
}
